Cycle Finding: Floyd's Algorithm
(Tortoise and Hare Algorithm)
From https://web.ntnu.edu.tw/~algo/Function.html

龜兔賽跑演算法


以龜兔兩個變數就能找到循環，相當節省記憶體。

一、尋找循環長度的倍數：

龜兔從起點同時出發，龜走一步、兔就走兩步。由於兔比龜快，當龜兔皆進入循環之中，兔必然領先數圈、從後方追上龜。

當龜兔相遇，龜兔的行走距離差，即是循環長度的倍數。龜一倍速、兔兩倍速，龜兔的行走距離差，剛好是龜的行進距離。龜的行進距離即是循環長度的倍數。

二、尋找循環起點：

龜退回起點，兔原地待命，龜兔同時出發，龜走一步、兔走一步。龜兔相遇之處即是循環起點。

三、尋找循環長度：

從循環之中任意一處出發，一次走一步，繞一圈回到原處，即得循環長度。

void floyd(int x)
{
	// 尋找循環長度的倍數。
	// tortoise是龜，hare是兔。龜一倍速，兔兩倍速。
	int tortoise = f(x), hare = f(f(x));
	while (tortoise != hare)
	{
		tortoise = f(tortoise);
		hare = f(f(hare));
	}

	// 尋找循環起點。
	// 龜退回起點。龜兔皆一倍速。
	hare = tortoise; tortoise = x;
	while (tortoise != hare)
	{
		tortoise = f(tortoise);
		hare = f(hare);
	}
	cout << "循環起點" << tortoise;

	// 尋找循環長度。
	// 龜不動，兔一倍速。
	int period = 1;
	hare = f(tortoise);
	while (tortoise != hare)
	{
		hare = f(hare);
		period++;
	}
	cout << "循環長度" << period;
}
int floyd(int x)
{
	int a = 0, b = 0, period = 0;
	do { a = f(a); b = f(f(b)); } while (a != b);
	do { b = f(b); period++; } while (a != b);
	return period;
}
時間複雜度
